{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Stack:\n",
    "    def __init__ (self):\n",
    "        ## create an empty stack\n",
    "        self.s = []\n",
    "        \n",
    "    def push (self, value):\n",
    "        # add an element onto the stack \n",
    "        self.s.append(value)\n",
    "        \n",
    "    def pop (self):\n",
    "        #collect the topmost element\n",
    "        if self.is_empty():\n",
    "            print('Stack is empty, cannot pop anything')\n",
    "            return\n",
    "        return self.s.pop()\n",
    "        \n",
    "    def size (self):\n",
    "        return len(self.s)\n",
    "    \n",
    "    def peek (self):\n",
    "        #just see the topmost element, don't collect it\n",
    "        return self.s[-1]\n",
    "    \n",
    "    def is_empty(self):\n",
    "        return (len(self.s) == 0) \n",
    "\n",
    "    \n",
    "#my_stack = Stack()\n",
    "#my_stack.push(3)\n",
    "#my_stack.push(8)\n",
    "#my_stack.pop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Queue:\n",
    "  #FIFO queue implementation using a Python list as underlying storage\n",
    "    DEFAULT_CAPACITY = 10          # moderate capacity for all new queues\n",
    "    def __init__(self):\n",
    "        \"\"\"Create an empty queue.\"\"\"\n",
    "        self.data = [None] * Queue.DEFAULT_CAPACITY\n",
    "        self.size = 0\n",
    "        self.front = 0\n",
    "\n",
    "    def Size(self):\n",
    "        \"\"\"Return the number of elements in the queue.\"\"\"\n",
    "        return self.size\n",
    "    \n",
    "    def is_empty(self):\n",
    "        \"\"\"Return True if the queue is empty.\"\"\"\n",
    "        return self.size == 0\n",
    "    \n",
    "    def first(self):\n",
    "        \"\"\"Return (but do not remove) the element at the front of the queue.\"\"\"\n",
    "\n",
    "        if self.is_empty():\n",
    "            raise Exception('Queue is empty')\n",
    "        return self.data[self.front]\n",
    "\n",
    "    def dequeue(self):\n",
    "        #Remove and return the first element of the queue (i.e., FIFO)\n",
    "        if self.is_empty():\n",
    "            raise Exception('Queue is empty')\n",
    "        answer = self.data[self.front]\n",
    "        self.data[self.front] = None         # help garbage collection\n",
    "        self.front = (self.front + 1) % Queue.DEFAULT_CAPACITY\n",
    "        self.size -= 1\n",
    "        return answer\n",
    "\n",
    "    def enqueue(self, value):\n",
    "        \"\"\"Add an element to the back of queue.\"\"\"\n",
    "        if self.size == Queue.DEFAULT_CAPACITY:\n",
    "            #self._resize(2 * len(self.data))     # double the array size\n",
    "            raise Exception('Queue is full')\n",
    "        rear = (self.front + self.size) % Queue.DEFAULT_CAPACITY\n",
    "        self.data[rear] = value\n",
    "        self.size += 1\n",
    "    \n",
    "    def _resize(self, cap):                  # we assume cap >= len(self)\n",
    "        \"\"\"Resize to a new list of capacity >= len(self).\"\"\"\n",
    "        old = self.data                       # keep track of existing list\n",
    "        self.data = [None] * cap              # allocate list with new capacity\n",
    "        walk = self.front\n",
    "        for k in range(self.size):            # only consider existing elements\n",
    "            self.data[k] = old[walk]            # intentionally shift indices\n",
    "            walk = (1 + walk) % len(old)         # use old size as modulus\n",
    "            self.front = 0                        # front has been realigned\n",
    "#qq = Queue()\n",
    "#qq.enqueue(44)\n",
    "#qq.enqueue(12)\n",
    "#qq.dequeue()\n",
    "#qq.dequeue()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "graph = {'A': ['B', 'C'],\n",
    "         'B': ['A', 'D', 'E'],\n",
    "         'C': ['A', 'F'],\n",
    "         'D': ['B'],\n",
    "         'E': ['B', 'F'],\n",
    "         'F': ['C', 'E']}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'A': {'B'}, 'B': {'C', 'D'}, 'D': {'E'}, 'E': {'F'}, 'F': {'G'}}"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from collections import defaultdict\n",
    "import heapq\n",
    "\n",
    "\n",
    "def create_spanning_tree(graph, starting_vertex):\n",
    "    mst = defaultdict(set)\n",
    "    visited = set([starting_vertex])\n",
    "    edges = [\n",
    "        (cost, starting_vertex, to)\n",
    "        for to, cost in graph[starting_vertex].items()\n",
    "    ]\n",
    "    heapq.heapify(edges)\n",
    "\n",
    "    while edges:\n",
    "        cost, frm, to = heapq.heappop(edges)\n",
    "        if to not in visited:\n",
    "            visited.add(to)\n",
    "            mst[frm].add(to)\n",
    "            for to_next, cost in graph[to].items():\n",
    "                if to_next not in visited:\n",
    "                    heapq.heappush(edges, (cost, to, to_next))\n",
    "\n",
    "    return mst\n",
    "\n",
    "example_graph = {\n",
    "    'A': {'B': 2, 'C': 3},\n",
    "    'B': {'A': 2, 'C': 1, 'D': 1, 'E': 4},\n",
    "    'C': {'A': 3, 'B': 1, 'F': 5},\n",
    "    'D': {'B': 1, 'E': 1},\n",
    "    'E': {'B': 4, 'D': 1, 'F': 1},\n",
    "    'F': {'C': 5, 'E': 1, 'G': 1},\n",
    "    'G': {'F': 1},\n",
    "}\n",
    "\n",
    "dict(create_spanning_tree(example_graph, 'A'))\n",
    "\n",
    "# {'A': set(['B']),\n",
    "#  'B': set(['C', 'D']),\n",
    "#  'D': set(['E']),\n",
    "#  'E': set(['F']),\n",
    "#  'F': set(['G'])}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['A', 'B', 'C', 'D', 'E', 'F']"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def bfs(graph, start): \n",
    "    MST = {}           # the list of all vertices in the MST so far\n",
    "    vert_Q = Queue()       # a queue that holds vertices temporarily as we go bfs\n",
    "    vert_Q.enqueue(start)  # add the starting vertex to the rear of queue\n",
    "\n",
    "    while not vert_Q.is_empty():   # keep exploring till no vertex remains unvisited\n",
    "        vertex = vert_Q.dequeue()  # get the first vertex at the head of the queue\n",
    "        if vertex not in visited:  # if this vertex has not been visited before, (i.e. not in visisted list yet)\n",
    "            visited.append(vertex) # visit it, i.e. add it to the visited list\n",
    "            for v in graph[vertex]: # for all its adjacent vertices\n",
    "                if v not in visited: # in case any of these has not been visited before\n",
    "                    vert_Q.enqueue(v) # add it to the rear of the queue\n",
    "    return visited                    # when the queue is emptied, return the visited sequence   \n",
    "\n",
    "bfs(graph, 'A') # {'B', 'C', 'A', 'F', 'D', 'E'}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "example_graph = {\n",
    "    'A': {'B': 2, 'C': 3},\n",
    "    'B': {'A': 2, 'C': 1, 'D': 1, 'E': 4},\n",
    "    'C': {'A': 3, 'B': 1, 'F': 5},\n",
    "    'D': {'B': 1, 'E': 1},\n",
    "    'E': {'B': 4, 'D': 1, 'F': 1},\n",
    "    'F': {'C': 5, 'E': 1, 'G': 1},\n",
    "    'G': {'F': 1},\n",
    "}\n",
    "\n",
    "# initialize the graph\n",
    "\n",
    "# populate the graph\n",
    "    #loop graph[v][u] = weight\n",
    "\n",
    "# initialize the MST and the set X\n",
    "T = set();\n",
    "X = set();\n",
    "\n",
    "# select an arbitrary vertex to begin with\n",
    "X.add(0);\n",
    "\n",
    "while len(X) != vertices:\n",
    "    crossing = set();\n",
    "    # for each element x in X, add the edge (x, k) to crossing if\n",
    "    # k is not in X\n",
    "    for x in X:\n",
    "        for k in range(vertices):\n",
    "            if k not in X and graph[x][k] != 0:\n",
    "                crossing.add((x, k))\n",
    "    # find the edge with the smallest weight in crossing\n",
    "    edge = sorted(crossing, key=lambda e:graph[e[0]][e[1]])[0];\n",
    "    # add this edge to T\n",
    "    T.add(edge)\n",
    "    # add the new vertex to X\n",
    "    X.add(edge[1])\n",
    "\n",
    "# print the edges of the MST\n",
    "for edge in T:\n",
    "    print edge"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "example_graph = {\n",
    "    'A': {'B': 2, 'C': 3},\n",
    "    'B': {'A': 2, 'C': 1, 'D': 1, 'E': 4},\n",
    "    'C': {'A': 3, 'B': 1, 'F': 5},\n",
    "    'D': {'B': 1, 'E': 1},\n",
    "    'E': {'B': 4, 'D': 1, 'F': 1},\n",
    "    'F': {'C': 5, 'E': 1, 'G': 1},\n",
    "    'G': {'F': 1},\n",
    "}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('my name')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
